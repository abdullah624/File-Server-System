/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client_server;


import static client_server.Server.dataOutputStream;
import static client_server.Server.serverSocket;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import client_server.Files;
import java.awt.Font;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import javax.swing.border.EmptyBorder;

/**
 *
 * @author abdullah
 */
public class Client extends javax.swing.JFrame {
    
    static Socket socket;
    static DataInputStream dataInputStream;
    static DataOutputStream dataOutputStream;
    static int port;
    static String msg = "";
    final File[] fileToUpload = new File[1];
    FileInputStream fileInputStream;
    static ArrayList<Files> myFiles = new ArrayList<>();
    static boolean connected = false;

    /**
     * Creates new form Client
     */
    public Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        portNumber = new javax.swing.JTextField();
        connect = new javax.swing.JButton();
        selectFile = new javax.swing.JButton();
        uploadFile = new javax.swing.JButton();
        serversFiles = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        notificationArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Client");

        jLabel2.setFont(new java.awt.Font("DejaVu Sans", 1, 16)); // NOI18N
        jLabel2.setText("Port Number :");

        portNumber.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        portNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portNumberActionPerformed(evt);
            }
        });

        connect.setFont(new java.awt.Font("DejaVu Sans", 1, 16)); // NOI18N
        connect.setText("Connect");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        selectFile.setFont(new java.awt.Font("DejaVu Sans", 1, 18)); // NOI18N
        selectFile.setText("Select File");
        selectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileActionPerformed(evt);
            }
        });

        uploadFile.setFont(new java.awt.Font("DejaVu Sans", 1, 18)); // NOI18N
        uploadFile.setText("Upload File");
        uploadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadFileActionPerformed(evt);
            }
        });

        serversFiles.setFont(new java.awt.Font("DejaVu Sans", 1, 18)); // NOI18N
        serversFiles.setText("Servers Files");
        serversFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serversFilesActionPerformed(evt);
            }
        });

        notificationArea.setColumns(20);
        notificationArea.setRows(5);
        jScrollPane1.setViewportView(notificationArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portNumber)
                .addGap(18, 18, 18)
                .addComponent(connect, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectFile, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(uploadFile, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addComponent(serversFiles, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connect))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectFile)
                    .addComponent(uploadFile)
                    .addComponent(serversFiles))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void portNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portNumberActionPerformed

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        try {
            // TODO add your handling code here:
            String port = portNumber.getText().trim();
            if (!port.isEmpty()) {
                int PORT = Integer.parseInt(port);
                socket = new Socket("localhost", PORT);
                dataInputStream = new DataInputStream(socket.getInputStream());
                dataOutputStream = new DataOutputStream(socket.getOutputStream());
                connected = true;
                connect.hide();
                portNumber.setText("");
                notificationArea.setText("\nConnected!");
                portNumber.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(null, "Please Provide IP Address and Port number ", "Alert", JOptionPane.WARNING_MESSAGE);
                connected = false;
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "IP AddressOr Port Is Invalid !", "Alert", JOptionPane.WARNING_MESSAGE);
            connected = false;
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_connectActionPerformed

    private void serversFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serversFilesActionPerformed
        if (connected) {
            ServersAllFile();
            new ServerFiles(myFiles, dataOutputStream, dataInputStream).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Please established your socket connection !", "Alert", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_serversFilesActionPerformed

    private void selectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileActionPerformed
        if (connected) {
            JFileChooser jFileChooser = new JFileChooser();
            jFileChooser.setDialogTitle("Choose a file to send.");
            if (jFileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                fileToUpload[0] = jFileChooser.getSelectedFile();
                notificationArea.append("The file you want to send is: " + fileToUpload[0].getName());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please established your socket connection !", "Alert", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_selectFileActionPerformed

    private void uploadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadFileActionPerformed
        if (connected) {
            if (fileToUpload[0] == null) {
                notificationArea.append("\nPlease choose a file to send first!");
                JOptionPane.showMessageDialog(null, "Please choose a file to send first!", "Alert", JOptionPane.WARNING_MESSAGE);
            } else {
                try {
                    fileInputStream = new FileInputStream(fileToUpload[0]);
                    String fileName = fileToUpload[0].getName();
                    dataOutputStream.writeUTF(fileName);
                    int ch;
                    do {
                        ch = fileInputStream.read();
                        dataOutputStream.writeUTF(String.valueOf(ch));
                    } while (ch != -1);
                    fileInputStream.close();
                    if (ch == -1) {
                        notificationArea.append("\nFile Successfully Uploaded");
                    }

                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please established your socket connection !", "Alert", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_uploadFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }
    
    public static String getFileExtension(String fileName) {
        int i = fileName.lastIndexOf('.');
        if (i > 0) {
            return fileName.substring(i + 1);
        } else {
            return "Extension not found.";
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea notificationArea;
    private javax.swing.JTextField portNumber;
    private javax.swing.JButton selectFile;
    private javax.swing.JToggleButton serversFiles;
    private javax.swing.JButton uploadFile;
    // End of variables declaration//GEN-END:variables
    
    private void ServersAllFile() {
        try {
            dataOutputStream.writeUTF("files-on-server");
            myFiles.clear();
            String templistofFiles = dataInputStream.readUTF();
            int listofFiles = Integer.parseInt(templistofFiles);
            for (int i = 0; i < listofFiles; i++) {
                int fileNameLength = dataInputStream.readInt();
                if (fileNameLength > 0) {
                    byte[] fileNameBytes = new byte[fileNameLength];
                    dataInputStream.readFully(fileNameBytes, 0, fileNameBytes.length);
                    String fileName = new String(fileNameBytes);
                    int fileContentLength = dataInputStream.readInt();
                    byte[] fileContentBytes = null;
                    if (fileContentLength > 0) {
                        fileContentBytes = new byte[fileContentLength];
                        dataInputStream.readFully(fileContentBytes, 0, fileContentBytes.length);
                    }
                    Files myfile = new Files(i, fileName, fileContentBytes, getFileExtension(fileName));
                    myFiles.add(myfile);
                    //System.out.println(myfile.getId() + " " + myfile.getName() + " " + myfile.getData() + " " + myfile.getFileExtension());
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
